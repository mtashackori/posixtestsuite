diff --git a/lib/libc/gen/sysconf.c b/lib/libc/gen/sysconf.c
index ebd590b..b3805f9 100644
--- a/lib/libc/gen/sysconf.c
+++ b/lib/libc/gen/sysconf.c
@@ -411,9 +411,10 @@ yesno:		if (sysctl(mib, mib_len, &value, &len, NULL, 0) == -1)
 		return _POSIX_THREAD_ATTR_STACKSIZE;
 	case _SC_THREAD_SAFE_FUNCTIONS:
 		return _POSIX_THREAD_SAFE_FUNCTIONS;
+	case _SC_THREAD_PRIO_PROTECT:
+		return _POSIX_THREAD_PRIO_PROTECT;
 	case _SC_THREAD_PRIORITY_SCHEDULING:
 	case _SC_THREAD_PRIO_INHERIT:
-	case _SC_THREAD_PRIO_PROTECT:
 	case _SC_THREAD_PROCESS_SHARED:
 		return -1;
 	case _SC_TTY_NAME_MAX:
diff --git a/lib/libc/sys/Makefile.inc b/lib/libc/sys/Makefile.inc
index 3b80ce4..37be06d 100644
--- a/lib/libc/sys/Makefile.inc
+++ b/lib/libc/sys/Makefile.inc
@@ -173,7 +173,7 @@ WEAKASM= accept.S __aio_suspend50.S close.S connect.S execve.S \
 	msgrcv.S msgsnd.S __msync13.S  __nanosleep50.S open.S poll.S \
 	__pollts50.S __pselect50.S read.S readlink.S \
 	readv.S _sched_setparam.S _sched_getparam.S _sched_setaffinity.S \
-	_sched_getaffinity.S sched_yield.S \
+	_sched_getaffinity.S sched_yield.S _sched_protect.S \
 	__select50.S setcontext.S __sigprocmask14.S __sigsuspend14.S sysarch.S \
 	__wait450.S wait6.S write.S writev.S
 
diff --git a/lib/libpthread/pthread.h b/lib/libpthread/pthread.h
index 5970378..3255514 100644
--- a/lib/libpthread/pthread.h
+++ b/lib/libpthread/pthread.h
@@ -94,6 +94,12 @@ int	pthread_mutex_destroy(pthread_mutex_t *);
 int	pthread_mutex_lock(pthread_mutex_t *);
 int	pthread_mutex_trylock(pthread_mutex_t *);
 int	pthread_mutex_unlock(pthread_mutex_t *);
+int	pthread_mutex_timedlock(pthread_mutex_t *,
+	    const struct timespec*__restrict);
+int	pthread_mutex_getprioceiling(const pthread_mutex_t *__restrict,
+	    int*__restrict);
+int	pthread_mutex_setprioceiling(pthread_mutex_t* __restrict,
+	    int, int*__restrict);
 int	pthread_mutexattr_init(pthread_mutexattr_t *);
 int	pthread_mutexattr_destroy(pthread_mutexattr_t *);
 int	pthread_mutexattr_getpshared(const pthread_mutexattr_t*__restrict attr, int *__restrict pshared);
@@ -101,7 +107,14 @@ int	pthread_mutexattr_setpshared(pthread_mutexattr_t *attr, int pshared);
 int	pthread_mutexattr_gettype(const pthread_mutexattr_t * __restrict,
 	    int * __restrict);
 int	pthread_mutexattr_settype(pthread_mutexattr_t *attr, int);
-
+int	pthread_mutexattr_getprotocol(const pthread_mutexattr_t * __restrict,
+	    int*__restrict);
+int	pthread_mutexattr_setprotocol(pthread_mutexattr_t*,
+	    int);
+int	pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *__restrict,
+	    int*__restrict);
+int	pthread_mutexattr_setprioceiling(pthread_mutexattr_t*,
+	    int);
 int	pthread_cond_init(pthread_cond_t * __restrict,
 	    const pthread_condattr_t * __restrict);
 int	pthread_cond_destroy(pthread_cond_t *);
@@ -116,7 +129,8 @@ int	pthread_cond_broadcast(pthread_cond_t *);
 int	pthread_condattr_init(pthread_condattr_t *);
 #if defined(_NETBSD_SOURCE)
 int     pthread_condattr_setclock(pthread_condattr_t *, clockid_t);
-int	pthread_condattr_getclock(pthread_condattr_t *);
+int	pthread_condattr_getclock(const pthread_condattr_t *__restrict attr,
+	    clockid_t *__restrict clock_id);
 #endif
 int	pthread_condattr_destroy(pthread_condattr_t *);
 int	pthread_condattr_getpshared(const pthread_condattr_t *__restrict attr, int* __restrict pshared);
@@ -257,6 +271,10 @@ __END_DECLS
 #define	PTHREAD_MUTEX_RECURSIVE		2
 #define	PTHREAD_MUTEX_DEFAULT		PTHREAD_MUTEX_NORMAL
 
+#define	PTHREAD_PRIO_NONE		0
+#define	PTHREAD_PRIO_INHERIT		1
+#define	PTHREAD_PRIO_PROTECT		2
+
 #define PTHREAD_COND_INITIALIZER	_PTHREAD_COND_INITIALIZER
 #define PTHREAD_MUTEX_INITIALIZER	_PTHREAD_MUTEX_INITIALIZER
 #define PTHREAD_ONCE_INIT		_PTHREAD_ONCE_INIT
diff --git a/lib/libpthread/pthread_cond.c b/lib/libpthread/pthread_cond.c
index 1c0fb30..cf4ba58 100644
--- a/lib/libpthread/pthread_cond.c
+++ b/lib/libpthread/pthread_cond.c
@@ -370,11 +370,13 @@ pthread_condattr_setclock(pthread_condattr_t *attr, clockid_t clck)
 }
 
 int
-pthread_condattr_getclock(pthread_condattr_t *attr)
+pthread_condattr_getclock(const pthread_condattr_t *__restrict attr,
+	    clockid_t *__restrict clock_id)
 {
 	if (attr == NULL || attr->ptca_private == NULL)
 		return EINVAL;
-	return *(int *)attr->ptca_private;
+	*clock_id = *(clockid_t*)attr->ptca_private;
+	return 0;
 }
 
 int
diff --git a/lib/libpthread/pthread_mutex.c b/lib/libpthread/pthread_mutex.c
index e755ade..e09e839 100644
--- a/lib/libpthread/pthread_mutex.c
+++ b/lib/libpthread/pthread_mutex.c
@@ -51,6 +51,7 @@ __RCSID("$NetBSD: pthread_mutex.c,v 1.59 2014/02/03 15:51:01 rmind Exp $");
 
 #include <sys/types.h>
 #include <sys/lwpctl.h>
+#include <sys/sched.h>
 #include <sys/lock.h>
 
 #include <errno.h>
@@ -67,10 +68,12 @@ __RCSID("$NetBSD: pthread_mutex.c,v 1.59 2014/02/03 15:51:01 rmind Exp $");
 #define	MUTEX_WAITERS_BIT		((uintptr_t)0x01)
 #define	MUTEX_RECURSIVE_BIT		((uintptr_t)0x02)
 #define	MUTEX_DEFERRED_BIT		((uintptr_t)0x04)
+#define	MUTEX_PROTECT_BIT		((uintptr_t)0x08)
 #define	MUTEX_THREAD			((uintptr_t)-16L)
 
 #define	MUTEX_HAS_WAITERS(x)		((uintptr_t)(x) & MUTEX_WAITERS_BIT)
 #define	MUTEX_RECURSIVE(x)		((uintptr_t)(x) & MUTEX_RECURSIVE_BIT)
+#define	MUTEX_PROTECT(x)		((uintptr_t)(x) & MUTEX_PROTECT_BIT)
 #define	MUTEX_OWNER(x)			((uintptr_t)(x) & MUTEX_THREAD)
 
 #if __GNUC_PREREQ__(3, 0)
@@ -80,7 +83,8 @@ __RCSID("$NetBSD: pthread_mutex.c,v 1.59 2014/02/03 15:51:01 rmind Exp $");
 #endif
 
 static void	pthread__mutex_wakeup(pthread_t, pthread_mutex_t *);
-static int	pthread__mutex_lock_slow(pthread_mutex_t *);
+static int	pthread__mutex_lock_slow(pthread_mutex_t *,
+	    const struct timespec*);
 static int	pthread__mutex_unlock_slow(pthread_mutex_t *);
 static void	pthread__mutex_pause(void);
 
@@ -103,16 +107,21 @@ __strong_alias(__libc_mutexattr_settype,pthread_mutexattr_settype)
 int
 pthread_mutex_init(pthread_mutex_t *ptm, const pthread_mutexattr_t *attr)
 {
-	intptr_t type;
+	uintptr_t type, proto, val, ceil;
 
 	if (__predict_false(__uselibcstub))
 		return __libc_mutex_init_stub(ptm, attr);
 
-	if (attr == NULL)
+	if (attr == NULL) {
 		type = PTHREAD_MUTEX_NORMAL;
-	else
-		type = (intptr_t)attr->ptma_private;
-
+		proto = PTHREAD_PRIO_NONE;
+		ceil = 0;
+	} else {
+		val = (uintptr_t)attr->ptma_private;
+		type = val & 0xff;
+		proto = (val & 0xff00) >> 8;
+		ceil = (val & 0xff0000) >> 16;
+	}
 	switch (type) {
 	case PTHREAD_MUTEX_ERRORCHECK:
 		__cpu_simple_lock_set(&ptm->ptm_errorcheck);
@@ -127,10 +136,18 @@ pthread_mutex_init(pthread_mutex_t *ptm, const pthread_mutexattr_t *attr)
 		ptm->ptm_owner = NULL;
 		break;
 	}
+	switch (proto) {
+	case PTHREAD_PRIO_PROTECT:
+		val = (uintptr_t)ptm->ptm_owner;
+		val |= MUTEX_PROTECT_BIT;
+		ptm->ptm_owner = (void*)val;
+		break;
 
+	}
 	ptm->ptm_magic = _PT_MUTEX_MAGIC;
 	ptm->ptm_waiters = NULL;
 	ptm->ptm_recursed = 0;
+	ptm->ptm_ceiling = (unsigned char)ceil;
 
 	return 0;
 }
@@ -168,7 +185,24 @@ pthread_mutex_lock(pthread_mutex_t *ptm)
 #endif
 		return 0;
 	}
-	return pthread__mutex_lock_slow(ptm);
+	return pthread__mutex_lock_slow(ptm, NULL);
+}
+
+int
+pthread_mutex_timedlock(pthread_mutex_t* ptm, const struct timespec *ts)
+{
+	pthread_t self;
+	void *val;
+
+	self = pthread__self();
+	val = atomic_cas_ptr(&ptm->ptm_owner, NULL, self);
+	if (__predict_true(val == NULL)) {
+#ifndef PTHREAD__ATOMIC_IS_MEMBAR
+		membar_enter();
+#endif
+		return 0;
+	}
+	return pthread__mutex_lock_slow(ptm, ts);
 }
 
 /* We want function call overhead. */
@@ -258,11 +292,12 @@ again:
 }
 
 NOINLINE static int
-pthread__mutex_lock_slow(pthread_mutex_t *ptm)
+pthread__mutex_lock_slow(pthread_mutex_t *ptm, const struct timespec *ts)
 {
 	void *waiters, *new, *owner, *next;
 	pthread_t self;
 	int serrno;
+	int error;
 
 	pthread__error(EINVAL, "Invalid mutex",
 	    ptm->ptm_magic == _PT_MUTEX_MAGIC);
@@ -282,6 +317,10 @@ pthread__mutex_lock_slow(pthread_mutex_t *ptm)
 			return EDEADLK;
 	}
 
+	/*priority protect*/
+	if (MUTEX_PROTECT(owner) && _sched_protect(ptm->ptm_ceiling) == -1) {
+		return errno;
+	}
 	serrno = errno;
 	for (;; owner = ptm->ptm_owner) {
 		/* Spin while the owner is running. */
@@ -339,12 +378,23 @@ pthread__mutex_lock_slow(pthread_mutex_t *ptm)
 		 */
 		while (self->pt_mutexwait) {
 			self->pt_blocking++;
-			(void)_lwp_park(CLOCK_REALTIME, TIMER_ABSTIME, NULL,
+			error = _lwp_park(CLOCK_REALTIME, TIMER_ABSTIME, ts,
 			    self->pt_unpark, __UNVOLATILE(&ptm->ptm_waiters),
 			    __UNVOLATILE(&ptm->ptm_waiters));
 			self->pt_unpark = 0;
 			self->pt_blocking--;
 			membar_sync();
+			if (__predict_true(error != -1)) {
+				continue;
+			}
+			if (errno == ETIMEDOUT && self->pt_mutexwait) {
+				/*Remove self from waiters list*/
+				pthread__mutex_wakeup(self, ptm);
+				/*priority protect*/
+				if (MUTEX_PROTECT(owner))
+					(void)_sched_protect(-1);
+				return ETIMEDOUT;
+			}
 		}
 	}
 }
@@ -460,6 +510,10 @@ pthread__mutex_unlock_slow(pthread_mutex_t *ptm)
 	 */
 	if (new != owner) {
 		owner = atomic_swap_ptr(&ptm->ptm_owner, new);
+		if (__predict_false(MUTEX_PROTECT(owner))) {
+			/*restore elevated priority*/
+			(void)_sched_protect(-1);
+		}
 		if (MUTEX_HAS_WAITERS(owner) != 0) {
 			pthread__mutex_wakeup(self, ptm);
 			return 0;
@@ -591,16 +645,21 @@ pthread_mutexattr_destroy(pthread_mutexattr_t *attr)
 int
 pthread_mutexattr_gettype(const pthread_mutexattr_t *attr, int *typep)
 {
+	uintptr_t val;
+
 	pthread__error(EINVAL, "Invalid mutex attribute",
 	    attr->ptma_magic == _PT_MUTEXATTR_MAGIC);
 
-	*typep = (int)(intptr_t)attr->ptma_private;
+	val = (uintptr_t)attr->ptma_private & ~0x00ffL;
+	*typep = (int)val;
 	return 0;
 }
 
 int
 pthread_mutexattr_settype(pthread_mutexattr_t *attr, int type)
 {
+	uintptr_t val;
+
 	if (__predict_false(__uselibcstub))
 		return __libc_mutexattr_settype_stub(attr, type);
 
@@ -611,7 +670,8 @@ pthread_mutexattr_settype(pthread_mutexattr_t *attr, int type)
 	case PTHREAD_MUTEX_NORMAL:
 	case PTHREAD_MUTEX_ERRORCHECK:
 	case PTHREAD_MUTEX_RECURSIVE:
-		attr->ptma_private = (void *)(intptr_t)type;
+		val = (uintptr_t)attr->ptma_private & ~0x00ffL;
+		attr->ptma_private = (void*)(val | type);
 		return 0;
 	default:
 		return EINVAL;
@@ -619,6 +679,67 @@ pthread_mutexattr_settype(pthread_mutexattr_t *attr, int type)
 }
 
 int
+pthread_mutexattr_getprotocol(const pthread_mutexattr_t *attr, int*proto)
+{
+	uintptr_t val;
+	
+	pthread__error(EINVAL, "Invalid mutex attribute",
+		attr->ptma_magic == _PT_MUTEXATTR_MAGIC);
+
+	val = (uintptr_t)attr->ptma_private & ~0xff00L;
+	*proto = (int)(val >> 8);
+	return 0;
+}
+
+int 
+pthread_mutexattr_setprotocol(pthread_mutexattr_t* attr, int proto)
+{
+	uintptr_t val;
+	
+	pthread__error(EINVAL, "Invalid mutex attribute",
+		attr->ptma_magic == _PT_MUTEXATTR_MAGIC);
+
+	switch (proto) {
+	case PTHREAD_PRIO_NONE:
+	case PTHREAD_PRIO_PROTECT:
+		val = (uintptr_t)attr->ptma_private & ~0xff00L;
+		attr->ptma_private = (void *)(val | (proto << 8));
+		return 0;
+	case PTHREAD_PRIO_INHERIT:
+		return ENOTSUP;
+	default:
+		return EINVAL;
+	}
+}
+
+int 
+pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *attr, int *ceil)
+{
+	uintptr_t val;
+	
+	pthread__error(EINVAL, "Invalid mutex attribute",
+		attr->ptma_magic == _PT_MUTEXATTR_MAGIC);
+
+	val = (uintptr_t)attr->ptma_private & ~0xff0000L;
+	*ceil = (int)(val >> 16);
+	return 0;
+}
+
+int 
+pthread_mutexattr_setprioceiling(pthread_mutexattr_t *attr, int ceil) 
+{
+	uintptr_t val;
+
+	pthread__error(EINVAL, "Invalid mutex attribute",
+		attr->ptma_magic == _PT_MUTEXATTR_MAGIC);
+	
+	/*check range*/
+	val = (uintptr_t)attr->ptma_private & ~0xff0000L;
+	attr->ptma_private = (void*)(val | (ceil << 16));
+	return 0;
+}
+
+int
 pthread_mutexattr_getpshared(const pthread_mutexattr_t *__restrict attr, int* __restrict pshared) {
 	*pshared = PTHREAD_PROCESS_PRIVATE;
 	return 0;
@@ -662,6 +783,28 @@ pthread__mutex_deferwake(pthread_t self, pthread_mutex_t *ptm)
 }
 
 int
+pthread_mutex_getprioceiling(const pthread_mutex_t *ptm, int*ceil) 
+{
+	*ceil = (unsigned int)ptm->ptm_ceiling;
+	return 0;
+}
+
+int
+pthread_mutex_setprioceiling(pthread_mutex_t *ptm, int ceil, int *old_ceil) 
+{
+	int error;
+
+	error = pthread_mutex_lock(ptm);
+	if (error == 0) {
+		*old_ceil = (unsigned int)ptm->ptm_ceiling;
+		/*check range*/
+		ptm->ptm_ceiling = (unsigned char)ceil;
+		pthread_mutex_unlock(ptm);
+	}
+	return error;
+}
+
+int
 _pthread_mutex_held_np(pthread_mutex_t *ptm)
 {
 
diff --git a/lib/libpthread/pthread_types.h b/lib/libpthread/pthread_types.h
index a25be8e..1898946 100644
--- a/lib/libpthread/pthread_types.h
+++ b/lib/libpthread/pthread_types.h
@@ -115,7 +115,7 @@ struct	__pthread_mutex_st {
 #ifdef __CPU_SIMPLE_LOCK_PAD
 	uint8_t		ptm_pad1[3];
 #endif
-	__pthread_spin_t ptm_interlock;	/* unused - backwards compat */
+	__pthread_spin_t ptm_ceiling;
 #ifdef __CPU_SIMPLE_LOCK_PAD
 	uint8_t		ptm_pad2[3];
 #endif
diff --git a/sys/kern/init_sysent.c b/sys/kern/init_sysent.c
index 6897ad5..25fe59b 100644
--- a/sys/kern/init_sysent.c
+++ b/sys/kern/init_sysent.c
@@ -1682,8 +1682,10 @@ struct sysent sysent[] = {
 		.sy_call = (sy_call_t *)sys_sched_yield
 	},		/* 350 = sched_yield */
 	{
-		.sy_call = sys_nosys,
-	},		/* 351 = filler */
+		ns(struct sys__sched_protect_args),
+		.sy_flags = SYCALL_ARG_PTR,
+		.sy_call = (sy_call_t *)sys__sched_protect
+	},		/* 351 = _sched_protect */
 	{
 		.sy_call = sys_nosys,
 	},		/* 352 = filler */
diff --git a/sys/kern/kern_lwp.c b/sys/kern/kern_lwp.c
index 2ce8972..6100e21 100644
--- a/sys/kern/kern_lwp.c
+++ b/sys/kern/kern_lwp.c
@@ -829,6 +829,8 @@ lwp_create(lwp_t *l1, proc_t *p2, vaddr_t uaddr, int flags,
 	l2->l_kpribase = PRI_KERNEL;
 	l2->l_priority = l1->l_priority;
 	l2->l_inheritedprio = -1;
+	l2->l_protectprio = -1;
+	l2->l_auxprio = -1;
 	l2->l_flag = 0;
 	l2->l_pflag = LP_MPSAFE;
 	TAILQ_INIT(&l2->l_ld_locks);
diff --git a/sys/kern/kern_sleepq.c b/sys/kern/kern_sleepq.c
index e506c9b..ca6ce1c 100644
--- a/sys/kern/kern_sleepq.c
+++ b/sys/kern/kern_sleepq.c
@@ -479,5 +479,6 @@ sleepq_lendpri(lwp_t *l, pri_t pri)
 	KASSERT(lwp_locked(l, NULL));
 
 	l->l_inheritedprio = pri;
+	l->l_auxprio = MAX(l->l_inheritedprio, l->l_protectprio);
 	sleepq_reinsert(sq, l);
 }
diff --git a/sys/kern/kern_synch.c b/sys/kern/kern_synch.c
index 5d86a75..5efcf0a 100644
--- a/sys/kern/kern_synch.c
+++ b/sys/kern/kern_synch.c
@@ -1085,9 +1085,11 @@ sched_lendpri(struct lwp *l, pri_t pri)
 		KASSERT(lwp_locked(l, l->l_cpu->ci_schedstate.spc_mutex));
 		sched_dequeue(l);
 		l->l_inheritedprio = pri;
+		l->l_auxprio = MAX(l->l_inheritedprio, l->l_protectprio);
 		sched_enqueue(l, false);
 	} else {
 		l->l_inheritedprio = pri;
+		l->l_auxprio = MAX(l->l_inheritedprio, l->l_protectprio);
 	}
 	resched_cpu(l);
 }
diff --git a/sys/kern/sys_sched.c b/sys/kern/sys_sched.c
index 2c97615..787628e 100644
--- a/sys/kern/sys_sched.c
+++ b/sys/kern/sys_sched.c
@@ -532,6 +532,61 @@ out:
 }
 
 /*
+ * Priority protection for PTHREAD_PRIO_PROTECT. This is a weak
+ * analogue of priority inheritance: temp raise the priority
+ * of the caller when accessing a protected resource.
+ */
+int 
+sys__sched_protect(struct lwp *l, 
+    const struct sys__sched_protect_args *uap, register_t * retval)
+{
+        /* {
+                syscallarg(int) priority;
+        } */
+	int error;
+	pri_t pri;
+
+	KASSERT(l->l_inheritedprio == -1);
+	KASSERT(l->l_auxprio == -1 || l->l_auxprio == l->l_protectprio);
+	
+	pri = SCARG(uap, priority);
+	error = 0;
+	lwp_lock(l);
+	if (pri < 0) {
+		/*back out priority changes*/
+		switch(l->l_protectdepth) {
+		case 0:
+			error = EINVAL;
+			break;
+		case 1:
+			l->l_protectdepth = 0;
+			l->l_protectprio = -1;
+			l->l_auxprio = -1;
+			break;
+		default:
+			l->l_protectdepth--;
+			break;	
+		}
+	} else if (__predict_false(pri < SCHED_PRI_MIN ||
+	    pri > SCHED_PRI_MAX || l->l_priority > pri + PRI_USER_RT)) {
+		/*must fail if existing priority is higher*/
+		error = EINVAL;
+	} else {
+		/*play along but make no changes if not a realtime LWP.*/
+		l->l_protectdepth++;
+		pri += PRI_USER_RT;
+		if (__predict_true(l->l_class != SCHED_OTHER && 
+			pri > l->l_protectprio)) {
+			l->l_protectprio = pri;
+			l->l_auxprio = pri;
+		}
+	}
+	lwp_unlock(l);
+
+	return error;
+}
+
+/*
  * Yield.
  */
 int
diff --git a/sys/kern/syscalls.master b/sys/kern/syscalls.master
index 119649e..4bd76e2 100644
--- a/sys/kern/syscalls.master
+++ b/sys/kern/syscalls.master
@@ -692,7 +692,7 @@
 349	STD 		{ int|sys||_sched_getaffinity(pid_t pid, lwpid_t lid, \
 			    size_t size, cpuset_t *cpuset); }
 350	STD 		{ int|sys||sched_yield(void); }
-351	UNIMPL
+351	STD		{ int|sys||_sched_protect(int priority); }	
 352	UNIMPL
 353	UNIMPL
 
diff --git a/sys/sys/lwp.h b/sys/sys/lwp.h
index 10a291c..a70bcf5 100644
--- a/sys/sys/lwp.h
+++ b/sys/sys/lwp.h
@@ -105,6 +105,9 @@ struct lwp {
 	pri_t		l_kpribase;	/* !: kernel priority base level */
 	pri_t		l_priority;	/* l: scheduler priority */
 	pri_t		l_inheritedprio;/* l: inherited priority */
+	pri_t		l_protectprio;	/* l: for PTHREAD_PRIO_PROTECT */
+	pri_t		l_auxprio;	/* l: max(inherit,protect) priority */
+	int		l_protectdepth;	/* l: for PTHREAD_PRIO_PROTECT */
 	SLIST_HEAD(, turnstile) l_pi_lenders; /* l: ts lending us priority */
 	uint64_t	l_ncsw;		/* l: total context switches */
 	uint64_t	l_nivcsw;	/* l: involuntary context switches */
@@ -403,9 +406,6 @@ lwp_lendpri(lwp_t *l, pri_t pri)
 {
 	KASSERT(mutex_owned(l->l_mutex));
 
-	if (l->l_inheritedprio == pri)
-		return;
-
 	(*l->l_syncobj->sobj_lendpri)(l, pri);
 	KASSERT(l->l_inheritedprio == pri);
 }
@@ -418,7 +418,7 @@ lwp_eprio(lwp_t *l)
 	pri = l->l_priority;
 	if ((l->l_flag & LW_SYSTEM) == 0 && l->l_kpriority && pri < PRI_KERNEL)
 		pri = (pri >> 1) + l->l_kpribase;
-	return MAX(l->l_inheritedprio, pri);
+	return MAX(l->l_auxprio, pri);
 }
 
 int lwp_create(lwp_t *, struct proc *, vaddr_t, int,
diff --git a/sys/sys/sched.h b/sys/sys/sched.h
index e059569..5e5082e 100644
--- a/sys/sys/sched.h
+++ b/sys/sys/sched.h
@@ -124,6 +124,7 @@ int	_sched_getaffinity(pid_t, lwpid_t, size_t, cpuset_t *);
 int	_sched_setaffinity(pid_t, lwpid_t, size_t, const cpuset_t *);
 int	_sched_getparam(pid_t, lwpid_t, int *, struct sched_param *);
 int	_sched_setparam(pid_t, lwpid_t, int, const struct sched_param *);
+int	_sched_protect(int);
 __END_DECLS
 
 /*
diff --git a/sys/sys/syscall.h b/sys/sys/syscall.h
index a64c114..a2a645f 100644
--- a/sys/sys/syscall.h
+++ b/sys/sys/syscall.h
@@ -953,6 +953,9 @@
 /* syscall: "sched_yield" ret: "int" args: */
 #define	SYS_sched_yield	350
 
+/* syscall: "sched_protect" ret: "int" args: "int" */
+#define SYS__sched_protect 351
+	
 /* syscall: "fsync_range" ret: "int" args: "int" "int" "off_t" "off_t" */
 #define	SYS_fsync_range	354
 
diff --git a/sys/sys/syscallargs.h b/sys/sys/syscallargs.h
index dd087ce..b66cf7a 100644
--- a/sys/sys/syscallargs.h
+++ b/sys/sys/syscallargs.h
@@ -2188,6 +2188,13 @@ struct sys__sched_getaffinity_args {
 check_syscall_args(sys__sched_getaffinity)
 #endif /* !RUMP_CLIENT */
 
+#ifndef RUMP_CLIENT
+struct sys__sched_protect_args {
+        syscallarg(int) priority; 
+};                              
+check_syscall_args(sys__sched_protect)
+#endif /* !RUMP_CLIENT */
+
 struct sys_fsync_range_args {
 	syscallarg(int) fd;
 	syscallarg(int) flags;
@@ -3776,6 +3783,8 @@ int	sys__sched_setaffinity(struct lwp *, const struct sys__sched_setaffinity_arg
 
 int	sys__sched_getaffinity(struct lwp *, const struct sys__sched_getaffinity_args *, register_t *);
 
+int	sys__sched_protect(struct lwp *, const struct sys__sched_protect_args *, register_t*);
+
 int	sys_sched_yield(struct lwp *, const void *, register_t *);
 
 int	sys_fsync_range(struct lwp *, const struct sys_fsync_range_args *, register_t *);
diff --git a/sys/sys/unistd.h b/sys/sys/unistd.h
index 73f6f1e..8a8d85c 100644
--- a/sys/sys/unistd.h
+++ b/sys/sys/unistd.h
@@ -146,6 +146,8 @@
 					/* pthread_attr for stack address */
 #define	_POSIX_THREAD_ATTR_STACKADDR	200112L
 					/* _r functions */
+#define	_POSIX_THREAD_PRIO_PROTECT	200112L
+					/* PTHREAD_PRIO_PROTECT */
 #define	_POSIX_THREAD_SAFE_FUNCTIONS	200112L
 					/* timeouts */
 #undef	_POSIX_TIMEOUTS
