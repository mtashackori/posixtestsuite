diff -ruNa c/posixtestsuite/conformance/interfaces/clock_gettime/3-1.c patched/conformance/interfaces/clock_gettime/3-1.c
--- c/posixtestsuite/conformance/interfaces/clock_gettime/3-1.c	2003-09-24 15:58:08.000000000 -0700
+++ patched/conformance/interfaces/clock_gettime/3-1.c	2016-08-17 16:51:38.000000000 -0700
@@ -58,9 +58,9 @@
 		printf("Test PASSED\n");
 		return PTS_PASS;
 	} else {
-		printf("Test FAILED - ts1=%ld,ts2=%ld,ts3=%ld,ts4=%ld\n",
-				ts1.tv_sec, ts2.tv_sec, ts3.tv_sec, 
-				ts4.tv_sec);
+    		printf("Test FAILED - ts1=%jd,ts2=%jd,ts3=%jd,ts4=%jd\n",
+    	    			(intmax_t)ts1.tv_sec, (intmax_t)ts2.tv_sec, (intmax_t)ts3.tv_sec, 
+				(intmax_t)ts4.tv_sec);
 		return PTS_FAIL;
 	}
 
diff -ruNa c/posixtestsuite/conformance/interfaces/gmtime/1-1.c patched/conformance/interfaces/gmtime/1-1.c
--- c/posixtestsuite/conformance/interfaces/gmtime/1-1.c	2005-02-09 05:34:45.000000000 -0800
+++ patched/conformance/interfaces/gmtime/1-1.c	2016-08-17 16:53:18.000000000 -0700
@@ -23,7 +23,7 @@
 
 	(void) time(&the_time);
 	tm_ptr = gmtime(&the_time);
-	printf("Raw time is %ld \n", the_time);
+	printf("Raw time is %jd \n", (intmax_t)the_time);
 	printf("gmtime gives:\n");
 
 	/* Checking the seconds */
diff -ruNa c/posixtestsuite/conformance/interfaces/mmap/13-1.c patched/conformance/interfaces/mmap/13-1.c
--- c/posixtestsuite/conformance/interfaces/mmap/13-1.c	2004-05-23 23:59:30.000000000 -0700
+++ patched/conformance/interfaces/mmap/13-1.c	2016-08-17 16:55:02.000000000 -0700
@@ -73,7 +73,7 @@
   
   data = (char *) malloc(total_size); 
   memset(data, 'a', total_size);
-  printf("Time before write(): %ld\n", time(NULL));
+  printf("Time before write(): %jd\n", (intmax_t)time(NULL));
   if (write(fd, data, total_size) != total_size)
   {
     printf(TNAME "Error at write(): %s\n", 
@@ -97,7 +97,7 @@
   
   flag = MAP_SHARED;
   prot = PROT_READ | PROT_WRITE;
-  printf("Time before mmap(): %ld\n", time(NULL));
+  printf("Time before mmap(): %jd\n", (intmax_t)time(NULL));
   pa = mmap(addr, size, prot, flag, fd, off);
   if (pa == MAP_FAILED)
   {
@@ -126,7 +126,7 @@
   ch = pa;
   *ch = 'b';
   
-  printf("Time before munmap(): %ld\n", time(NULL));
+  printf("Time before munmap(): %jd\n", (intmax_t)time(NULL));
   munmap(pa, size);
   
   /* FIXME: Update the in-core meta data to the disk */
diff -ruNa c/posixtestsuite/conformance/interfaces/mmap/14-1.c patched/conformance/interfaces/mmap/14-1.c
--- c/posixtestsuite/conformance/interfaces/mmap/14-1.c	2004-05-24 00:50:27.000000000 -0700
+++ patched/conformance/interfaces/mmap/14-1.c	2016-08-17 17:20:04.000000000 -0700
@@ -68,7 +68,7 @@
   
   data = (char *) malloc(total_size); 
   memset(data, 'a', total_size);
-  printf("Time before write(): %ld\n", time(NULL));
+  printf("Time before write(): %jd\n", (intmax_t)time(NULL));
   if (write(fd, data, total_size) != total_size)
   {
     printf(TNAME "Error at write(): %s\n", 
@@ -80,7 +80,7 @@
   sleep(1); 
   flag = MAP_SHARED;
   prot = PROT_READ | PROT_WRITE;
-  printf("Time before mmap(): %ld\n", time(NULL));
+  printf("Time before mmap(): %jd\n", (intmax_t)time(NULL));
   pa = mmap(addr, size, prot, flag, fd, off);
   if (pa == MAP_FAILED)
   {
@@ -90,7 +90,7 @@
     exit(PTS_FAIL);
   }
   sleep(1); 
-  printf("Time before write reference: %ld\n", time(NULL));
+  printf("Time before write reference: %jd\n", (intmax_t)time(NULL));
   /* Before write reference */
   if (stat(tmpfname, &stat_buff) == -1)
   {
@@ -110,7 +110,7 @@
   * is not acurate enough to reflect the update
   */
   sleep(1);
-  printf("Time before msync(): %ld\n", time(NULL));
+  printf("Time before msync(): %jd\n", (intmax_t)time(NULL));
   msync(pa, size, MS_SYNC);
 
   /* FIXME: Update the in-core meta data to the disk */
@@ -127,8 +127,8 @@
   ctime2 = stat_buff.st_ctime;
   mtime2 = stat_buff.st_mtime;
  
-  printf("ctime1: %ld, ctime2: %ld\nmtime1: %ld, mtime2: %ld\n",
-                  ctime1, ctime2, mtime1, mtime2); 
+  printf("ctime1: %jd, ctime2: %jd\nmtime1: %jd, mtime2: %jd\n",
+                    (intmax_t)ctime1, (intmax_t)ctime2, (intmax_t)mtime1, (intmax_t)mtime2);
   if (ctime2 == ctime1 || mtime2 == mtime1)
   {
     printf("Test Fail " TNAME 
diff -ruNa c/posixtestsuite/conformance/interfaces/mmap/24-2.c patched/conformance/interfaces/mmap/24-2.c
--- c/posixtestsuite/conformance/interfaces/mmap/24-2.c	2004-04-20 18:59:48.000000000 -0700
+++ patched/conformance/interfaces/mmap/24-2.c	2016-08-17 16:57:48.000000000 -0700
@@ -74,7 +74,7 @@
 		printf(TNAME " Error at getrlimit(): %s\n", strerror(errno));
 		return PTS_UNRESOLVED;
   }
-  printf("available memory: %lu\n", rlim.rlim_cur); 
+  printf("available memory: %ju\n", (uintmax_t)rlim.rlim_cur); 
  
   /* First mmap, just to get a legal addr for second mmap */ 
   fd = shm_fd;	
diff -ruNa c/posixtestsuite/conformance/interfaces/pthread_create/11-1.c patched/conformance/interfaces/pthread_create/11-1.c
--- c/posixtestsuite/conformance/interfaces/pthread_create/11-1.c	2006-08-14 19:47:48.000000000 -0700
+++ patched/conformance/interfaces/pthread_create/11-1.c	2016-08-17 17:11:12.000000000 -0700
@@ -31,8 +31,8 @@
 	/* Just test the tv_sec field here. */
 	if (ts.tv_sec != 0)
 	{
-		printf("ts.tv_sec: %ld, ts.tv_nsec: %ld\n", 
-			ts.tv_sec, ts.tv_nsec);
+		printf("ts.tv_sec: %jd, ts.tv_nsec: %jd\n", 
+				(intmax_t)ts.tv_sec, (intmax_t)ts.tv_nsec);
 		exit(PTS_FAIL);
 	}
 	pthread_exit(0);
diff -ruNa c/posixtestsuite/conformance/interfaces/sched_yield/1-1.c patched/conformance/interfaces/sched_yield/1-1.c
--- c/posixtestsuite/conformance/interfaces/sched_yield/1-1.c	2004-06-07 19:23:47.000000000 -0700
+++ patched/conformance/interfaces/sched_yield/1-1.c	2016-08-17 17:23:13.000000000 -0700
@@ -133,7 +133,7 @@
 	long result = 0;
 #ifdef LINUX        
         set_thread_affinity(*(int *)arg);
-        fprintf(stderr, "%ld bind to cpu: %d\n", pthread_self(), *(int*)arg);
+        fprintf(stderr, "%jd bind to cpu: %d\n", (intmax_t)pthread_self(), *(int*)arg);
 #endif
 	
 	for(;i<LOOP;i++){
@@ -173,7 +173,7 @@
 #ifdef LINUX        
         /* Bind to a processor */
         set_process_affinity(cpu);
-        fprintf(stderr, "%d bind to cpu: %d\n", getpid(), cpu);
+        fprintf(stderr, "%jd bind to cpu: %d\n", (intmax_t)pthread_self(), *(int*)arg);
 #endif
         param.sched_priority = sched_get_priority_max(SCHED_FIFO);
         if(sched_setscheduler(getpid(), SCHED_FIFO, &param) != 0) {
