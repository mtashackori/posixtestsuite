diff -ruNa c/posixtestsuite/conformance/interfaces/sched_yield/1-1.c patched/conformance/interfaces/sched_yield/1-1.c
--- c/posixtestsuite/conformance/interfaces/sched_yield/1-1.c	2016-08-18 15:08:03.000000000 -0700
+++ patched/conformance/interfaces/sched_yield/1-1.c	2016-08-18 15:17:06.000000000 -0700
@@ -19,30 +19,25 @@
  *  4. Launch a thread which call sched_yield() and check that the counter has
  *     changed since the call.
  */
-#define LINUX
-
-#ifdef LINUX 
-#define _GNU_SOURCE
-#endif
-
+#include <sys/types.h>
+#include <sys/param.h>
+#include <sys/wait.h>
 #include <sched.h>
 #include <stdio.h>
 #include <unistd.h>
 #include <stdlib.h>
 #include <signal.h>
 #include <pthread.h>
+#include <inttypes.h>
+#include <stdint.h>
 #include <errno.h>
-#include <sys/wait.h>
 #include "posixtest.h"
 
 #ifdef BSD
-# include <sys/types.h>
-# include <sys/param.h>
 # include <sys/sysctl.h>
 #endif
 
 #ifdef HPUX
-# include <sys/param.h>
 # include <sys/pstat.h>
 #endif
 
@@ -78,10 +73,10 @@
 	return ncpu;
 }
 
-#ifdef LINUX
 int set_process_affinity(int cpu)
 {
 	int retval = -1;
+#if defined(CPU_ZERO)
 	cpu_set_t cpu_mask;
 	
 	CPU_ZERO(&cpu_mask);
@@ -92,22 +87,35 @@
 		return -1;
 	}
 		
-//#ifndef P2_SCHED_SETAFFINITY
 	retval = sched_setaffinity(0, sizeof(cpu_mask), &cpu_mask);
-//#else
-//	retval = sched_setaffinity(0, &cpu_mask);
-//#endif
+#elif defined(cpuset_create)
+    cpuset_t *cpu_mask = cpuset_create();
+
+    cpuset_zero(cpu_mask);
+    if (cpu >= 0 && cpu <= cpuset_size(cpu_mask)) {
+        cpuset_set(cpu, cpu_mask);
+    } else {
+        fprintf (stderr, "Wrong cpu id: %d\n", cpu);
+        return -1;
+    }
+    retval = _sched_setaffinity(0, 0, cpuset_size(cpu_mask), cpu_mask);
+    cpuset_destroy(cpu_mask);
+#else
+    #error "no cpuset"
+#endif
+
 	if (retval == -1)
 	perror("Error at sched_setaffinity()");
         
-        return retval;
+    return retval;
 }
 
 int set_thread_affinity(int cpu)
 {
 	int retval = -1;
-	cpu_set_t cpu_mask;
-	
+
+#if defined(CPU_ZERO) 
+    cpu_set_t cpu_mask;	
 	CPU_ZERO(&cpu_mask);
 	if (cpu >= 0 && cpu <= CPU_SETSIZE) {
 		CPU_SET(cpu, &cpu_mask);
@@ -115,26 +123,35 @@
 		fprintf (stderr, "Wrong cpu id: %d\n", cpu); 
 		return -1;
 	}
-//#ifndef P2_PTHREAD_SETAFFINITY
 	retval = pthread_setaffinity_np(pthread_self(), 
 			sizeof(cpu_mask), &cpu_mask);
-//#else
-//	retval = pthread_setaffinity_np(pthread_self(), &cpu_mask);
-//#endif
-        if (retval != 0)
+
+#elif defined(cpuset_create)
+    cpuset_t *cpu_mask = cpuset_create();
+
+    cpuset_zero(cpu_mask);
+    if (cpu >= 0 && cpu <= cpuset_size(cpu_mask)) {
+        cpuset_set(cpu, cpu_mask);
+    } else {
+        fprintf (stderr, "Wrong cpu id: %d\n", cpu);
+        return -1;
+    }
+    retval = pthread_setaffinity_np(0, cpuset_size(cpu_mask), cpu_mask);
+    cpuset_destroy(cpu_mask);
+#else
+    #error "no cpuset"
+#endif
+    if (retval != 0)
 	fprintf (stderr, "Error at pthread_setaffinity_np():\n");
 	return retval;
 }
 
-#endif
         
 void * runner(void * arg) {
 	int i=0, nc;
 	long result = 0;
-#ifdef LINUX        
-        set_thread_affinity(*(int *)arg);
-        fprintf(stderr, "%jd bind to cpu: %d\n", (intmax_t)pthread_self(), *(int*)arg);
-#endif
+    set_thread_affinity(*(int *)arg);
+   	fprintf(stderr, "%jd bind to cpu: %d\n", (intmax_t)pthread_self(), *(int*)arg);
 	
 	for(;i<LOOP;i++){
 		nc = nb_call;
@@ -154,12 +171,11 @@
 }
 
 void * busy_thread(void *arg){
-#ifdef LINUX        
-        set_thread_affinity(*(int *)arg);
-        fprintf(stderr, "%ld bind to cpu: %d\n", pthread_self(), *(int*)arg);
-#endif
-        while(1){ 
-                nb_call++;
+   	set_thread_affinity(*(int *)arg);
+   	fprintf(stderr, "%ld bind to cpu: %d\n", pthread_self(), *(int*)arg);
+
+   	while(1){ 
+       	nb_call++;
 		sched_yield();
 	}
 
@@ -170,11 +186,9 @@
 void buzy_process(int cpu){
         struct sched_param param;
 
-#ifdef LINUX        
         /* Bind to a processor */
         set_process_affinity(cpu);
         fprintf(stderr, "%jd bind to cpu: %d\n", (intmax_t)pthread_self(), *(int*)arg);
-#endif
         param.sched_priority = sched_get_priority_max(SCHED_FIFO);
         if(sched_setscheduler(getpid(), SCHED_FIFO, &param) != 0) {
                 perror("An error occurs when calling sched_setparam()");
