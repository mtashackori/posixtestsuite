From bf6147f00a730824ede2cec9d4abcd47438deb81 Mon Sep 17 00:00:00 2001
From: yan cui <ccuiyyan@gmail.com>
Date: Fri, 22 Jul 2016 00:35:44 +0000
Subject: [PATCH] improve error checking: improve based on code review

---
 sys/kern/kern_sig.c | 20 +++++++++++---------
 sys/kern/sys_sig.c  |  2 +-
 2 files changed, 12 insertions(+), 10 deletions(-)

diff --git a/sys/kern/kern_sig.c b/sys/kern/kern_sig.c
index 7a10c5a..df340fb 100644
--- a/sys/kern/kern_sig.c
+++ b/sys/kern/kern_sig.c
@@ -636,7 +636,7 @@ sigput(sigpend_t *sp, struct proc *p, ksiginfo_t *ksi)
 	
 	if (cnt >= SIGQUEUE_MAX) {
 		printf("no resource to enqueue\n");
-		return -1;
+		return EAGAIN;
 	}
 	ksi->ksi_flags |= KSI_QUEUED;
 	TAILQ_INSERT_TAIL(&sp->sp_info, ksi, ksi_list);
@@ -1215,7 +1215,7 @@ kpsignal2(struct proc *p, ksiginfo_t *ksi)
 	lwpid_t lid;
 	sig_t action;
 	bool toall;
-	int ret = 0;
+	int error = 0;
 
 	KASSERT(!cpu_intr_p());
 	KASSERT(mutex_owned(proc_lock));
@@ -1228,7 +1228,7 @@ kpsignal2(struct proc *p, ksiginfo_t *ksi)
 	 * exiting, then just drop the signal here and bail out.
 	 */
 	if (p->p_stat != SACTIVE && p->p_stat != SSTOP)
-		return ret;
+		return error;
 
 	/*
 	 * Notify any interested parties of the signal.
@@ -1256,7 +1256,8 @@ kpsignal2(struct proc *p, ksiginfo_t *ksi)
 			 */
 			if ((kp = ksiginfo_alloc(p, ksi, PR_NOWAIT)) == NULL)
 				goto discard;
-			ret = sigput(&p->p_sigpend, p, kp);
+			error = sigput(&p->p_sigpend, p, kp);
+			if (error != 0) goto out;
 		}
 	} else {
 		/*
@@ -1340,7 +1341,8 @@ kpsignal2(struct proc *p, ksiginfo_t *ksi)
 	if (lid != 0) {
 		l = lwp_find(p, lid);
 		if (l != NULL) {
-			ret = sigput(&l->l_sigpend, p, kp);
+			error = sigput(&l->l_sigpend, p, kp);
+			if (error != 0) goto out;
 			membar_producer();
 			(void)sigpost(l, action, prop, kp->ksi_signo);
 		}
@@ -1412,8 +1414,8 @@ kpsignal2(struct proc *p, ksiginfo_t *ksi)
 	 * Make signal pending.
 	 */
 	KASSERT((p->p_slflag & PSL_TRACED) == 0);
-	ret = sigput(&p->p_sigpend, p, kp);
-
+	error = sigput(&p->p_sigpend, p, kp);
+	if (error != 0) goto out;
 deliver:
 	/*
 	 * Before we set LW_PENDSIG on any LWP, ensure that the signal is
@@ -1437,10 +1439,10 @@ out:
 	 */
 	ksiginfo_free(kp);
 	if (signo == -1)
-		return ret;
+		return error;
 discard:
 	SDT_PROBE(proc, kernel, , signal__discard, l, p, signo, 0, 0);
-	return ret;
+	return error;
 }
 
 void
diff --git a/sys/kern/sys_sig.c b/sys/kern/sys_sig.c
index 00283a2..b1f05b1 100644
--- a/sys/kern/sys_sig.c
+++ b/sys/kern/sys_sig.c
@@ -258,7 +258,7 @@ kill1(struct lwp *l, pid_t pid, ksiginfo_t *ksi, register_t *retval)
 		    KAUTH_PROCESS_SIGNAL, p, KAUTH_ARG(ksi->ksi_signo),
 		    NULL, NULL);
 		if (!error && ksi->ksi_signo) {
-			if (kpsignal2(p, ksi) == -1) error = EAGAIN;
+			error = kpsignal2(p, ksi);
 		}
 		mutex_exit(p->p_lock);
 		mutex_exit(proc_lock);
-- 
2.6.4

