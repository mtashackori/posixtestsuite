Index: lib/libc/gen/sysconf.c
===================================================================
RCS file: /cvsroot/src/lib/libc/gen/sysconf.c,v
retrieving revision 1.32
diff -u -p -r1.32 sysconf.c
--- lib/libc/gen/sysconf.c	25 Jun 2008 11:46:12 -0000	1.32
+++ lib/libc/gen/sysconf.c	28 Jun 2008 09:53:24 -0000
@@ -387,9 +387,10 @@ yesno:		if (sysctl(mib, mib_len, &value,
 		return _POSIX_THREAD_ATTR_STACKSIZE;
 	case _SC_THREAD_SAFE_FUNCTIONS:
 		return _POSIX_THREAD_SAFE_FUNCTIONS;
+	case _SC_THREAD_PRIO_PROTECT:
+		return _POSIX_THREAD_PRIO_PROTECT;
 	case _SC_THREAD_PRIORITY_SCHEDULING:
 	case _SC_THREAD_PRIO_INHERIT:
-	case _SC_THREAD_PRIO_PROTECT:
 	case _SC_THREAD_PROCESS_SHARED:
 		return -1;
 	case _SC_TTY_NAME_MAX:
Index: lib/libc/sys/Makefile.inc
===================================================================
RCS file: /cvsroot/src/lib/libc/sys/Makefile.inc,v
retrieving revision 1.190
diff -u -p -r1.190 Makefile.inc
--- lib/libc/sys/Makefile.inc	25 Jun 2008 11:19:28 -0000	1.190
+++ lib/libc/sys/Makefile.inc	28 Jun 2008 09:53:25 -0000
@@ -133,7 +133,7 @@ WEAKASM= accept.S aio_suspend.S close.S 
 	msgrcv.S msgsnd.S __msync13.S \
 	nanosleep.S open.S poll.S pollts.S pselect.S read.S readlink.S readv.S \
 	_sched_setparam.S _sched_getparam.S _sched_setaffinity.S \
-	_sched_getaffinity.S sched_yield.S \
+	_sched_getaffinity.S sched_yield.S _sched_protect.S \
 	select.S __sigprocmask14.S __sigsuspend14.S sysarch.S \
 	wait4.S write.S writev.S
 
Index: lib/libpthread/pthread.h
===================================================================
RCS file: /cvsroot/src/lib/libpthread/pthread.h,v
retrieving revision 1.31
diff -u -p -r1.31 pthread.h
--- lib/libpthread/pthread.h	5 Jun 2008 23:38:51 -0000	1.31
+++ lib/libpthread/pthread.h	28 Jun 2008 09:53:26 -0000
@@ -1,7 +1,7 @@
 /*	$NetBSD: pthread.h,v 1.31 2008/06/05 23:38:51 ad Exp $	*/
 
 /*-
- * Copyright (c) 2001 The NetBSD Foundation, Inc.
+ * Copyright (c) 2001, 2008 The NetBSD Foundation, Inc.
  * All rights reserved.
  *
  * This code is derived from software contributed to The NetBSD Foundation
@@ -94,11 +94,23 @@ int	pthread_mutex_destroy(pthread_mutex_
 int	pthread_mutex_lock(pthread_mutex_t *);
 int	pthread_mutex_trylock(pthread_mutex_t *);
 int	pthread_mutex_unlock(pthread_mutex_t *);
+int	pthread_mutex_timedlock(pthread_mutex_t *,
+	    const struct timespec * __restrict);
+int	pthread_mutex_getprioceiling(const pthread_mutex_t * __restrict,
+	    int * __restrict);
+int	pthread_mutex_setprioceiling(pthread_mutex_t * __restrict, int,
+	    int * __restrict);
 int	pthread_mutexattr_init(pthread_mutexattr_t *);
 int	pthread_mutexattr_destroy(pthread_mutexattr_t *);
 int	pthread_mutexattr_gettype(const pthread_mutexattr_t * __restrict,
 	    int * __restrict);
 int	pthread_mutexattr_settype(pthread_mutexattr_t *attr, int);
+int	pthread_mutexattr_getprotocol(const pthread_mutexattr_t * __restrict,
+	    int * __restrict);
+int	pthread_mutexattr_setprotocol(pthread_mutexattr_t *, int);
+int	pthread_mutexattr_getprioceiling(const pthread_mutexattr_t * __restrict,
+	    int * __restrict);
+int	pthread_mutexattr_setprioceiling(pthread_mutexattr_t *, int);
 
 int	pthread_cond_init(pthread_cond_t * __restrict,
 	    const pthread_condattr_t * __restrict);
@@ -239,6 +251,10 @@ __END_DECLS
 #define	PTHREAD_MUTEX_RECURSIVE		2
 #define	PTHREAD_MUTEX_DEFAULT		PTHREAD_MUTEX_NORMAL
 
+#define	PTHREAD_PRIO_NONE		0
+#define	PTHREAD_PRIO_INHERIT		1
+#define	PTHREAD_PRIO_PROTECT		2
+
 #define PTHREAD_COND_INITIALIZER	_PTHREAD_COND_INITIALIZER
 #define PTHREAD_MUTEX_INITIALIZER	_PTHREAD_MUTEX_INITIALIZER
 #define PTHREAD_ONCE_INIT		_PTHREAD_ONCE_INIT
Index: lib/libpthread/pthread_mutex.c
===================================================================
RCS file: /cvsroot/src/lib/libpthread/pthread_mutex.c,v
retrieving revision 1.50
diff -u -p -r1.50 pthread_mutex.c
--- lib/libpthread/pthread_mutex.c	25 May 2008 17:05:28 -0000	1.50
+++ lib/libpthread/pthread_mutex.c	28 Jun 2008 09:53:26 -0000
@@ -51,6 +51,7 @@ __RCSID("$NetBSD: pthread_mutex.c,v 1.50
 
 #include <sys/types.h>
 #include <sys/lwpctl.h>
+#include <sys/sched.h>
 
 #include <errno.h>
 #include <limits.h>
@@ -64,10 +65,12 @@ __RCSID("$NetBSD: pthread_mutex.c,v 1.50
 #define	MUTEX_WAITERS_BIT		((uintptr_t)0x01)
 #define	MUTEX_RECURSIVE_BIT		((uintptr_t)0x02)
 #define	MUTEX_DEFERRED_BIT		((uintptr_t)0x04)
+#define	MUTEX_PROTECT_BIT		((uintptr_t)0x08)
 #define	MUTEX_THREAD			((uintptr_t)-16L)
 
 #define	MUTEX_HAS_WAITERS(x)		((uintptr_t)(x) & MUTEX_WAITERS_BIT)
 #define	MUTEX_RECURSIVE(x)		((uintptr_t)(x) & MUTEX_RECURSIVE_BIT)
+#define	MUTEX_PROTECT(x)		((uintptr_t)(x) & MUTEX_PROTECT_BIT)
 #define	MUTEX_OWNER(x)			((uintptr_t)(x) & MUTEX_THREAD)
 
 #if __GNUC_PREREQ__(3, 0)
@@ -77,7 +80,8 @@ __RCSID("$NetBSD: pthread_mutex.c,v 1.50
 #endif
 
 static void	pthread__mutex_wakeup(pthread_t, pthread_mutex_t *);
-static int	pthread__mutex_lock_slow(pthread_mutex_t *);
+static int	pthread__mutex_lock_slow(pthread_mutex_t *,
+					 const struct timespec *);
 static int	pthread__mutex_unlock_slow(pthread_mutex_t *);
 static void	pthread__mutex_pause(void);
 
@@ -102,12 +106,18 @@ __strong_alias(__libc_thr_once,pthread_o
 int
 pthread_mutex_init(pthread_mutex_t *ptm, const pthread_mutexattr_t *attr)
 {
-	intptr_t type;
+	uintptr_t type, proto, val, ceil;
 
-	if (attr == NULL)
+	if (attr == NULL) {
 		type = PTHREAD_MUTEX_NORMAL;
-	else
-		type = (intptr_t)attr->ptma_private;
+		proto = PTHREAD_PRIO_NONE;
+		ceil = 0;
+	} else {
+		val = (uintptr_t)attr->ptma_private;
+		type = val & 0xff;
+		proto = (val & 0xff00) >> 8;
+		ceil = (val & 0xff0000) >> 16;
+	}
 
 	switch (type) {
 	case PTHREAD_MUTEX_ERRORCHECK:
@@ -124,9 +134,18 @@ pthread_mutex_init(pthread_mutex_t *ptm,
 		break;
 	}
 
+	switch (proto) {
+	case PTHREAD_PRIO_PROTECT:
+		val = (uintptr_t)ptm->ptm_owner;
+		val |= MUTEX_PROTECT_BIT;
+		ptm->ptm_owner = (void *)val;
+		break;
+	}
+
 	ptm->ptm_magic = _PT_MUTEX_MAGIC;
 	ptm->ptm_waiters = NULL;
 	ptm->ptm_recursed = 0;
+	ptm->ptm_ceiling = (unsigned char)ceil;
 
 	return 0;
 }
@@ -159,7 +178,24 @@ pthread_mutex_lock(pthread_mutex_t *ptm)
 #endif
 		return 0;
 	}
-	return pthread__mutex_lock_slow(ptm);
+	return pthread__mutex_lock_slow(ptm, NULL);
+}
+
+int
+pthread_mutex_timedlock(pthread_mutex_t *ptm, const struct timespec *ts)
+{
+	pthread_t self;
+	void *val;
+
+	self = pthread__self();
+	val = atomic_cas_ptr(&ptm->ptm_owner, NULL, self);
+	if (__predict_true(val == NULL)) {
+#ifndef PTHREAD__ATOMIC_IS_MEMBAR
+		membar_enter();
+#endif
+		return 0;
+	}
+	return pthread__mutex_lock_slow(ptm, ts);
 }
 
 /* We want function call overhead. */
@@ -200,10 +236,11 @@ pthread__mutex_spin(pthread_mutex_t *ptm
 }
 
 NOINLINE static int
-pthread__mutex_lock_slow(pthread_mutex_t *ptm)
+pthread__mutex_lock_slow(pthread_mutex_t *ptm, const struct timespec *ts)
 {
 	void *waiters, *new, *owner, *next;
 	pthread_t self;
+	int error;
 
 	pthread__error(EINVAL, "Invalid mutex",
 	    ptm->ptm_magic == _PT_MUTEX_MAGIC);
@@ -223,6 +260,11 @@ pthread__mutex_lock_slow(pthread_mutex_t
 			return EDEADLK;
 	}
 
+	/* Priority protect? */
+	if (MUTEX_PROTECT(owner) && _sched_protect(ptm->ptm_ceiling) == -1) {
+		return errno;
+	}
+
 	for (;; owner = ptm->ptm_owner) {
 		/* Spin while the owner is running. */
 		owner = pthread__mutex_spin(ptm, owner);
@@ -318,12 +360,23 @@ pthread__mutex_lock_slow(pthread_mutex_t
 		 */
 		while (self->pt_mutexwait) {
 			self->pt_blocking++;
-			(void)_lwp_park(NULL, self->pt_unpark,
+			error = _lwp_park(ts, self->pt_unpark,
 			    __UNVOLATILE(&ptm->ptm_waiters),
 			    __UNVOLATILE(&ptm->ptm_waiters));
 			self->pt_unpark = 0;
 			self->pt_blocking--;
 			membar_sync();
+			if (__predict_true(error != -1)) {
+				continue;
+			}
+			if (errno == ETIMEDOUT && self->pt_mutexwait) {
+				/* Remove self from waiters list. */
+				pthread__mutex_wakeup(self, ptm);
+				/* Priority protect? */
+				if (MUTEX_PROTECT(owner))
+					(void)_sched_protect(-1);
+				return ETIMEDOUT;
+			}
 		}
 	}
 }
@@ -431,6 +484,10 @@ pthread__mutex_unlock_slow(pthread_mutex
 	 */
 	if (new != owner) {
 		owner = atomic_swap_ptr(&ptm->ptm_owner, new);
+		if (__predict_false(MUTEX_PROTECT(owner))) {
+			/* Restore elevated priority. */
+			(void)_sched_protect(-1);
+		}
 		if (MUTEX_HAS_WAITERS(owner) != 0) {
 			pthread__mutex_wakeup(self, ptm);
 			return 0;
@@ -551,11 +608,13 @@ pthread_mutexattr_destroy(pthread_mutexa
 int
 pthread_mutexattr_gettype(const pthread_mutexattr_t *attr, int *typep)
 {
+	uintptr_t val;
 
 	pthread__error(EINVAL, "Invalid mutex attribute",
 	    attr->ptma_magic == _PT_MUTEXATTR_MAGIC);
 
-	*typep = (int)(intptr_t)attr->ptma_private;
+	val = (uintptr_t)attr->ptma_private & ~0x00ffL;
+	*typep = (int)val;
 	return 0;
 }
 
@@ -563,6 +622,7 @@ pthread_mutexattr_gettype(const pthread_
 int
 pthread_mutexattr_settype(pthread_mutexattr_t *attr, int type)
 {
+	uintptr_t val;
 
 	pthread__error(EINVAL, "Invalid mutex attribute",
 	    attr->ptma_magic == _PT_MUTEXATTR_MAGIC);
@@ -571,13 +631,74 @@ pthread_mutexattr_settype(pthread_mutexa
 	case PTHREAD_MUTEX_NORMAL:
 	case PTHREAD_MUTEX_ERRORCHECK:
 	case PTHREAD_MUTEX_RECURSIVE:
-		attr->ptma_private = (void *)(intptr_t)type;
+		val = (uintptr_t)attr->ptma_private & ~0x00ffL;
+		attr->ptma_private = (void *)(val | type);
 		return 0;
 	default:
 		return EINVAL;
 	}
 }
 
+int
+pthread_mutexattr_getprotocol(const pthread_mutexattr_t *attr, int *proto)
+{
+	uintptr_t val;
+
+	pthread__error(EINVAL, "Invalid mutex attribute",
+	    attr->ptma_magic == _PT_MUTEXATTR_MAGIC);
+
+	val = (uintptr_t)attr->ptma_private & ~0xff00L;
+	*proto = (int)(val >> 8);
+	return 0;
+}
+
+int
+pthread_mutexattr_setprotocol(pthread_mutexattr_t *attr, int proto)
+{
+	uintptr_t val;
+
+	pthread__error(EINVAL, "Invalid mutex attribute",
+	    attr->ptma_magic == _PT_MUTEXATTR_MAGIC);
+
+	switch (proto) {
+	case PTHREAD_PRIO_NONE:
+	case PTHREAD_PRIO_PROTECT:
+		val = (uintptr_t)attr->ptma_private & ~0xff00L;
+		attr->ptma_private = (void *)(val | (proto << 8));
+		return 0;
+	case PTHREAD_PRIO_INHERIT:
+		return ENOTSUP;
+	default:
+		return EINVAL;
+	}
+}
+
+int
+pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *attr, int *ceil)
+{
+	uintptr_t val;
+
+	pthread__error(EINVAL, "Invalid mutex attribute",
+	    attr->ptma_magic == _PT_MUTEXATTR_MAGIC);
+
+	val = (uintptr_t)attr->ptma_private & ~0xff0000L;
+	*ceil = (int)(val >> 16);
+	return 0;
+}
+
+int
+pthread_mutexattr_setprioceiling(pthread_mutexattr_t *attr, int ceil)
+{
+	uintptr_t val;
+
+	pthread__error(EINVAL, "Invalid mutex attribute",
+	    attr->ptma_magic == _PT_MUTEXATTR_MAGIC);
+
+	/* XXX check range */
+	val = (uintptr_t)attr->ptma_private & ~0xff0000L;
+	attr->ptma_private = (void *)(val | (ceil << 16));
+	return 0;
+}
 
 static void
 once_cleanup(void *closure)
@@ -633,3 +754,26 @@ _pthread_mutex_owner_np(pthread_mutex_t 
 
 	return (pthread_t)MUTEX_OWNER(ptm->ptm_owner);
 }
+
+int
+pthread_mutex_getprioceiling(const pthread_mutex_t *ptm, int *ceil)
+{
+
+	*ceil = (unsigned int)ptm->ptm_ceiling;
+	return 0;
+}
+
+int
+pthread_mutex_setprioceiling(pthread_mutex_t *ptm, int ceil, int *old_ceil)
+{
+	int error;
+
+	error = pthread_mutex_lock(ptm);
+	if (error == 0) {
+		*old_ceil = (unsigned int)ptm->ptm_ceiling;
+		/* XXX check range */
+		ptm->ptm_ceiling = (unsigned char)ceil;
+		pthread_mutex_unlock(ptm);
+	}
+	return error;
+}
Index: lib/libpthread/pthread_types.h
===================================================================
RCS file: /cvsroot/src/lib/libpthread/pthread_types.h,v
retrieving revision 1.12
diff -u -p -r1.12 pthread_types.h
--- lib/libpthread/pthread_types.h	5 Jun 2008 23:38:51 -0000	1.12
+++ lib/libpthread/pthread_types.h	28 Jun 2008 09:53:26 -0000
@@ -83,13 +83,12 @@ struct	__pthread_attr_st {
 	void	*pta_private;
 };
 
-/*
- * ptm_lock will never be spun on: it's locked with
- * pthread__simple_lock_try() or not at all.
- */
 struct	__pthread_mutex_st {
 	unsigned int	ptm_magic;
-	unsigned int	ptm_errorcheck;
+	unsigned char	ptm_errorcheck;
+	unsigned char	ptm_ceiling;
+	unsigned char	ptm_unused1;
+	unsigned char	ptm_unused2;
 	unsigned int	ptm_recursed;
 	pthread_t * volatile ptm_waiters;
 	volatile pthread_t ptm_owner;
@@ -98,7 +97,7 @@ struct	__pthread_mutex_st {
 #define	_PT_MUTEX_MAGIC	0x33330003
 #define	_PT_MUTEX_DEAD	0xDEAD0003
 
-#define _PTHREAD_MUTEX_INITIALIZER { _PT_MUTEX_MAGIC, 0, 0, NULL, NULL }
+#define _PTHREAD_MUTEX_INITIALIZER { _PT_MUTEX_MAGIC, 0, 0, 0, 0, 0, NULL, NULL }
 
 struct	__pthread_mutexattr_st {
 	unsigned int	ptma_magic;
Index: sys/kern/kern_lwp.c
===================================================================
RCS file: /cvsroot/src/sys/kern/kern_lwp.c,v
retrieving revision 1.119
diff -u -p -r1.119 kern_lwp.c
--- sys/kern/kern_lwp.c	16 Jun 2008 09:45:20 -0000	1.119
+++ sys/kern/kern_lwp.c	28 Jun 2008 09:53:52 -0000
@@ -587,6 +587,8 @@ lwp_create(lwp_t *l1, proc_t *p2, vaddr_
 	l2->l_kpribase = PRI_KERNEL;
 	l2->l_priority = l1->l_priority;
 	l2->l_inheritedprio = -1;
+	l2->l_protectprio = -1;
+	l2->l_auxprio = -1;
 	l2->l_flag = inmem ? LW_INMEM : 0;
 	l2->l_pflag = LP_MPSAFE;
 	l2->l_fd = p2->p_fd;
Index: sys/kern/kern_proc.c
===================================================================
RCS file: /cvsroot/src/sys/kern/kern_proc.c,v
retrieving revision 1.143
diff -u -p -r1.143 kern_proc.c
--- sys/kern/kern_proc.c	24 Jun 2008 10:31:05 -0000	1.143
+++ sys/kern/kern_proc.c	28 Jun 2008 09:53:53 -0000
@@ -197,6 +197,8 @@ struct lwp lwp0 __aligned(MIN_LWP_ALIGNM
 	.l_refcnt = 1,
 	.l_priority = PRI_USER + NPRI_USER - 1,
 	.l_inheritedprio = -1,
+	.l_protectprio = -1,
+	.l_auxprio = -1,
 	.l_class = SCHED_OTHER,
 	.l_pi_lenders = SLIST_HEAD_INITIALIZER(&lwp0.l_pi_lenders),
 	.l_name = __UNCONST("swapper"),
Index: sys/kern/kern_sleepq.c
===================================================================
RCS file: /cvsroot/src/sys/kern/kern_sleepq.c,v
retrieving revision 1.33
diff -u -p -r1.33 kern_sleepq.c
--- sys/kern/kern_sleepq.c	17 Jun 2008 09:11:25 -0000	1.33
+++ sys/kern/kern_sleepq.c	28 Jun 2008 09:53:53 -0000
@@ -475,7 +475,7 @@ sleepq_lendpri(lwp_t *l, pri_t pri)
 
 	opri = lwp_eprio(l);
 	l->l_inheritedprio = pri;
-
+	l->l_auxprio = MAX(l->l_inheritedprio, l->l_protectprio);
 	if (lwp_eprio(l) == opri) {
 		return;
 	}
Index: sys/kern/kern_synch.c
===================================================================
RCS file: /cvsroot/src/sys/kern/kern_synch.c,v
retrieving revision 1.248
diff -u -p -r1.248 kern_synch.c
--- sys/kern/kern_synch.c	31 May 2008 21:26:01 -0000	1.248
+++ sys/kern/kern_synch.c	28 Jun 2008 09:53:53 -0000
@@ -1121,9 +1121,11 @@ sched_lendpri(struct lwp *l, pri_t pri)
 		KASSERT(lwp_locked(l, l->l_cpu->ci_schedstate.spc_mutex));
 		sched_dequeue(l);
 		l->l_inheritedprio = pri;
+		l->l_auxprio = MAX(l->l_inheritedprio, l->l_protectprio);
 		sched_enqueue(l, false);
 	} else {
 		l->l_inheritedprio = pri;
+		l->l_auxprio = MAX(l->l_inheritedprio, l->l_protectprio);
 	}
 	resched_cpu(l);
 }
Index: sys/kern/sys_sched.c
===================================================================
RCS file: /cvsroot/src/sys/kern/sys_sched.c,v
retrieving revision 1.26
diff -u -p -r1.26 sys_sched.c
--- sys/kern/sys_sched.c	22 Jun 2008 00:06:36 -0000	1.26
+++ sys/kern/sys_sched.c	28 Jun 2008 09:53:54 -0000
@@ -465,6 +465,62 @@ out:
 }
 
 /*
+ * Priority "protection" for PTHREAD_PRIO_PROTECT.  This is a weak
+ * analogue of priority inheritance: temporarily raise the priority
+ * of the caller when accessing a protected resource.
+ */
+int
+sys__sched_protect(struct lwp *l, const struct sys__sched_protect_args *uap,
+		   register_t *retval)
+{
+	/* {
+		syscallarg(int) priority;
+	} */
+	int error;
+	pri_t pri;
+
+	KASSERT(l->l_inheritedprio == -1);
+	KASSERT(l->l_auxprio == -1 || l->l_auxpri == l->l_protectprio);
+
+	pri = SCARG(uap, priority);
+	error = 0;
+
+	lwp_lock(l);
+	if (pri < 0) {
+		/* Back out priority change(s). */
+		switch (l->l_protectdepth) {
+		case 0:
+			error = EINVAL;
+			break;
+		case 1:
+			l->l_protectdepth = 0;
+			l->l_protectprio = -1;
+			l->l_auxprio = -1;
+			break;
+		default:
+			l->l_protectdepth--;
+			break;
+		}
+	} else if (__predict_false(pri < SCHED_PRI_MIN ||
+	    pri > SCHED_PRI_MAX || l->l_priority > pri + PRI_USER_RT)) {
+		/* Must fail if existing priority is higher. */
+		error = EINVAL;
+	} else {
+		/* Play along but make no changes if not a realtime LWP. */
+		l->l_protectdepth++;
+		pri += PRI_USER_RT;
+		if (__predict_true(l->l_class != SCHED_OTHER &&
+		    pri > l->l_protectprio)) {
+			l->l_protectprio = pri;
+			l->l_auxprio = pri;
+		}
+	}
+	lwp_unlock(l);
+
+	return error;
+}
+
+/*
  * Yield.
  */
 int
Index: sys/kern/syscalls.master
===================================================================
RCS file: /cvsroot/src/sys/kern/syscalls.master,v
retrieving revision 1.204
diff -u -p -r1.204 syscalls.master
--- sys/kern/syscalls.master	17 Jun 2008 16:05:23 -0000	1.204
+++ sys/kern/syscalls.master	28 Jun 2008 09:53:54 -0000
@@ -707,7 +707,7 @@
 349	STD 		{ int sys__sched_getaffinity(pid_t pid, lwpid_t lid, \
 			    size_t size, cpuset_t *cpuset); }
 350	STD 		{ int sys_sched_yield(void); }
-351	UNIMPL
+351	STD		{ int sys__sched_protect(int priority); }
 352	UNIMPL
 353	UNIMPL
 
Index: sys/sys/lwp.h
===================================================================
RCS file: /cvsroot/src/sys/sys/lwp.h,v
retrieving revision 1.102
diff -u -p -r1.102 lwp.h
--- sys/sys/lwp.h	22 Jun 2008 00:06:36 -0000	1.102
+++ sys/sys/lwp.h	28 Jun 2008 09:53:56 -0000
@@ -93,6 +93,9 @@ struct lwp {
 	pri_t		l_kpribase;	/* !: kernel priority base level */
 	pri_t		l_priority;	/* l: scheduler priority */
 	pri_t		l_inheritedprio;/* l: inherited priority */
+	pri_t		l_protectprio;	/* l: for PTHREAD_PRIO_PROTECT */
+	pri_t		l_auxprio;	/* l: max(inherit,protect) priority */
+	int		l_protectdepth;	/* l: for PTHREAD_PRIO_PROTECT */
 	SLIST_HEAD(, turnstile) l_pi_lenders; /* l: ts lending us priority */
 	uint64_t	l_ncsw;		/* l: total context switches */
 	uint64_t	l_nivcsw;	/* l: involuntary context switches */
@@ -357,9 +360,6 @@ lwp_lendpri(lwp_t *l, pri_t pri)
 {
 	KASSERT(mutex_owned(l->l_mutex));
 
-	if (l->l_inheritedprio == pri)
-		return;
-
 	(*l->l_syncobj->sobj_lendpri)(l, pri);
 }
 
@@ -371,7 +371,7 @@ lwp_eprio(lwp_t *l)
 	pri = l->l_priority;
 	if (l->l_kpriority && pri < PRI_KERNEL)
 		pri = (pri >> 1) + l->l_kpribase;
-	return MAX(l->l_inheritedprio, pri);
+	return MAX(l->l_auxprio, pri);
 }
 
 int lwp_create(lwp_t *, struct proc *, vaddr_t, bool, int,
Index: sys/sys/sched.h
===================================================================
RCS file: /cvsroot/src/sys/sys/sched.h,v
retrieving revision 1.62
diff -u -p -r1.62 sched.h
--- sys/sys/sched.h	22 Jun 2008 14:00:11 -0000	1.62
+++ sys/sys/sched.h	28 Jun 2008 09:53:56 -0000
@@ -136,6 +136,7 @@ int	_sched_getaffinity(pid_t, lwpid_t, s
 int	_sched_setaffinity(pid_t, lwpid_t, size_t, const cpuset_t *);
 int	_sched_getparam(pid_t, lwpid_t, int *, struct sched_param *);
 int	_sched_setparam(pid_t, lwpid_t, int, const struct sched_param *);
+int	_sched_protect(int);
 __END_DECLS
 
 /*
Index: sys/sys/unistd.h
===================================================================
RCS file: /cvsroot/src/sys/sys/unistd.h,v
retrieving revision 1.42
diff -u -p -r1.42 unistd.h
--- sys/sys/unistd.h	25 Jun 2008 11:46:11 -0000	1.42
+++ sys/sys/unistd.h	28 Jun 2008 09:53:57 -0000
@@ -98,6 +98,8 @@
 				/* pthread_attr functions for stack size */
 #define	_POSIX_THREAD_ATTR_STACKADDR	200112L
 				/* pthread_attr functions for stack address */
+#define	_POSIX_THREAD_PRIO_PROTECT	200112L
+				/* PTHREAD_PRIO_PROTECT supported */
 #define	_POSIX_SEMAPHORES	0
 				/* barriers */
 #define	_POSIX_BARRIERS		200112L
